{
  "parse": {
    "_help_additional_commands": [
      "Specify structure for custom cmake functions"
    ],
    "additional_commands": {
      "foo": {
        "flags": [
          "BAR",
          "BAZ"
        ],
        "kwargs": {
          "HEADERS": "*",
          "SOURCES": "*",
          "DEPENDS": "*"
        }
      }
    },
    "_help_override_spec": [
      "Override configurations per-command where available"
    ],
    "override_spec": {},
    "_help_vartags": [
      "Specify variable tags."
    ],
    "vartags": [],
    "_help_proptags": [
      "Specify property tags."
    ],
    "proptags": []
  },
  "format": {
    "disable": false,
    "line_width": 100,
    "tab_size": 4,
    "use_tabchars": true,
    "fractional_tab_policy": "use-space",
    "_help_max_subgroups_hwrap": [
      "If an argument group contains more than this many sub-groups",
      "(parg or kwarg groups) then force it to a vertical layout."
    ],
    "max_subgroups_hwrap": 3,
    "_help_max_pargs_hwrap": [
      "If a positional argument group contains more than this many",
      "arguments, then force it to a vertical layout."
    ],
    "max_pargs_hwrap": 6,
    "_help_max_rows_cmdline": [
      "If a cmdline positional group consumes more than this many",
      "lines without nesting, then invalidate the layout (and nest)"
    ],
    "max_rows_cmdline": 2,
    "separate_ctrl_name_with_space": true,
    "separate_fn_name_with_space": true,
    "dangle_parens": false,
    "dangle_align": "child",
    "_help_min_prefix_chars": [
      "If the statement spelling length (including space and",
      "parenthesis) is smaller than this amount, then force reject",
      "nested layouts."
    ],
    "min_prefix_chars": 4,
    "_help_max_prefix_chars": [
      "If the statement spelling length (including space and",
      "parenthesis) is larger than the tab width by more than this",
      "amount, then force reject un-nested layouts."
    ],
    "max_prefix_chars": 10,
    "_help_max_lines_hwrap": [
      "If a candidate layout is wrapped horizontally but it exceeds",
      "this many lines, then reject the layout."
    ],
    "max_lines_hwrap": 2,
    "line_ending": "unix",
    "command_case": "unchanged",
    "keyword_case": "unchanged",
    "_help_always_wrap": [
      "A list of command names which should always be wrapped"
    ],
    "always_wrap": [],
    "enable_sort": true,
    "autosort": true,
    "require_valid_layout": false,
    "_help_layout_passes": [
      "A dictionary mapping layout nodes to a list of wrap",
      "decisions. See the documentation for more information."
    ],
    "layout_passes": {}
  },
  "_help_markup": "Options affecting comment reflow and formatting.",
  "markup": {
    "bullet_char": "*",
    "enum_char": ".",
    "first_comment_is_literal": true,
    "_help_literal_comment_pattern": [
      "If comment markup is enabled, don't reflow any comment block",
      "which matches this (regex) pattern. Default is `None`",
      "(disabled)."
    ],
    "literal_comment_pattern": null,
    "_help_fence_pattern": [
      "Regular expression to match preformat fences in comments",
      "default= ``r'^\\s*([`~]{3}[`~]*)(.*)$'``"
    ],
    "fence_pattern": "^\\s*([`~]{3}[`~]*)(.*)$",
    "_help_ruler_pattern": [
      "Regular expression to match rulers in comments default=",
      "``r'^\\s*[^\\w\\s]{3}.*[^\\w\\s]{3}$'``"
    ],
    "ruler_pattern": "^\\s*[^\\w\\s]{3}.*[^\\w\\s]{3}$",
    "_help_explicit_trailing_pattern": [
      "If a comment line matches starts with this pattern then it",
      "is explicitly a trailing comment for the preceding",
      "argument. Default is '#<'"
    ],
    "explicit_trailing_pattern": "#<",
    "_help_hashruler_min_length": [
      "If a comment line starts with at least this many consecutive",
      "hash characters, then don't lstrip() them off. This allows",
      "for lazy hash rulers where the first hash char is not",
      "separated by space"
    ],
    "hashruler_min_length": 10,
    "canonicalize_hashrulers": false,
    "enable_markup": true
  },
  "lint": {
    "disabled_codes": [
      "C0301",
      "E1126",
      "E1120",
      "W0106",
      "R0915",
      "C0307"
    ],
    "function_pattern": ".*",
    "macro_pattern": ".*",
    "global_var_pattern": ".*",
    "internal_var_pattern": ".*",
    "local_var_pattern": ".*",
    "private_var_pattern": ".*",
    "public_var_pattern": ".*",
    "argument_var_pattern": ".*",
    "keyword_pattern": ".*",
    "_help_max_conditionals_custom_parser": [
      "In the heuristic for C0201, how many conditionals to match",
      "within a loop in before considering the loop a parser."
    ],
    "max_conditionals_custom_parser": 2,
    "min_statement_spacing": 1,
    "max_statement_spacing": 2,
    "max_returns": 6,
    "max_branches": 13,
    "max_arguments": 5,
    "max_localvars": 15,
    "max_statements": 50
  },
  "encode": {
    "emit_byteorder_mark": false,
    "input_encoding": "utf-8",
    "output_encoding": "utf-8"
  },
  "misc": {
    "_help_per_command": [
      "A dictionary containing any per-command configuration",
      "overrides. Currently only `command_case` is supported."
    ],
    "per_command": {}
  }
}
